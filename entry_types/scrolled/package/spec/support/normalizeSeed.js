/**
 * Construct data structure that resembles seed generated by server
 * side JBuilder templates.
 *
 * @param {Object} [options]
 * @param {Object} [options.imageFileUrlTemplates] - Mapping of url template names to url templates.
 * @param {Array} [options.entries] - Single-element-Array containing attributes of the entry.
 * @param {Array} [options.imageFiles] - Array of objects with image file attributes of entry.
 * @param {Array} [options.chapters] - Array of objects with chapter attributes of entry.
 * @param {Array} [options.sections] - Array of objects with section attributes of entry.
 * @param {Array} [options.contentElements] - Array of objects with content element attributes of entry.
 * @returns {Object} - Data that resembles seed generated by server side rendering.
 */
export function normalizeSeed({
  imageFileUrlTemplates,
  fileUrlTemplates,
  entries,
  imageFiles,
  chapters,
  sections,
  contentElements
} = {}) {
  const normalizedEntries = normalizeCollection(entries, {
    id: 1, configuration: {shareProviders: {facebook: true, twitter: false}}
  });

  const normalizedSections = normalizeCollection(sections, {
    configuration: {transition: 'scroll', backdrop: {image: '#000'}}
  });

  return {
    config: {
      fileUrlTemplates: {
        imageFiles: {
          ...imageFileUrlTemplates
        },
        ...fileUrlTemplates
      }
    },
    collections: {
      entries: normalizedEntries,
      imageFiles: normalizeCollection(imageFiles, {
        width: 1920,
        height: 1279,
        configuration: {},
      }),
      chapters: normalizeChapters(chapters, normalizedSections),
      sections: normalizedSections,
      contentElements: normalizeCollection(contentElements, {
        configuration: {}
      }),
    }
  }
}

function normalizeChapters(chapters = [], sections) {
  const chapterDefaults = {
    configuration: {}
  };

  if (sections.length && !chapters.length) {
    sections.forEach(section => section.chapterId = 100);
    return [
      {
        id: 100,
        permaId: 10,
        ...chapterDefaults
      }
    ]
  }

  return normalizeCollection(chapters, chapterDefaults);
}

function normalizeCollection(collection = [], defaults = {}) {
  return collection.map((item, index) => ({
    id: index,
    permaId: index,
    ...defaults,
    ...item
  }));
}
